CMAKE_MINIMUM_REQUIRED(VERSION 3.15)
#CLANG compiler activation options
SET (CMAKE_C_COMPILER "riscv64-unknown-linux-gnu-gcc")
SET (CMAKE_CXX_COMPILER "riscv64-unknown-linux-gnu-g++")

SET(CMAKE_BUILD_TYPE Release)
SET(NAME base64.bin)
PROJECT(${NAME})
ENABLE_TESTING()

# Update if necessary
IF(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  IF("${CMAKE_CXX_SIMULATE_ID}" STREQUAL "MSVC")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /std:c++17")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /O2")
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /O2")
  else()
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3")
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O3")
  endif()
endif()

# BUILD AND INCLUDE GOOGLETEST
ADD_SUBDIRECTORY(libs/googletest/)
INCLUDE_DIRECTORIES(libs/googletest/googletest/include)

INCLUDE_DIRECTORIES(libs)

AUX_SOURCE_DIRECTORY(./src/ CTR_SOURCES)
AUX_SOURCE_DIRECTORY(./src/adp-gmbh.ch CTR_SOURCES)
AUX_SOURCE_DIRECTORY(./src/apache CTR_SOURCES)
AUX_SOURCE_DIRECTORY(./src/arduino CTR_SOURCES)
AUX_SOURCE_DIRECTORY(./src/DaedalusAlpha CTR_SOURCES)
AUX_SOURCE_DIRECTORY(./src/ElegantDice CTR_SOURCES)
AUX_SOURCE_DIRECTORY(./src/gnome CTR_SOURCES)
AUX_SOURCE_DIRECTORY(./src/InternetSoftwareConsortium CTR_SOURCES)
AUX_SOURCE_DIRECTORY(./src/JouniMalinen CTR_SOURCES)
AUX_SOURCE_DIRECTORY(./src/libb64 CTR_SOURCES)
AUX_SOURCE_DIRECTORY(./src/libcurl CTR_SOURCES)
AUX_SOURCE_DIRECTORY(./src/LihO CTR_SOURCES)
AUX_SOURCE_DIRECTORY(./src/ManuelMartinez CTR_SOURCES)
AUX_SOURCE_DIRECTORY(./src/NibbleAndAHalf CTR_SOURCES)
AUX_SOURCE_DIRECTORY(./src/omnifarious CTR_SOURCES)
AUX_SOURCE_DIRECTORY(./src/polfosol CTR_SOURCES)
AUX_SOURCE_DIRECTORY(./src/user152949 CTR_SOURCES)
AUX_SOURCE_DIRECTORY(./src/wikibooks.org CTR_SOURCES)
AUX_SOURCE_DIRECTORY(./src/adition CTR_SOURCES)
AUX_SOURCE_DIRECTORY(./src/A.Hristov CTR_SOURCES)
AUX_SOURCE_DIRECTORY(./src/tomykaria CTR_SOURCES)
AUX_SOURCE_DIRECTORY(./src/stov-180947 CTR_SOURCES)
AUX_SOURCE_DIRECTORY(./src/libb64/libb64/src C_SOURCES)
AUX_SOURCE_DIRECTORY(./src/picobase64 C_SOURCES)

AUX_SOURCE_DIRECTORY(./libs/chromium/modp_b64 CTR_SOURCES)
AUX_SOURCE_DIRECTORY(./src/modp_b64_chromium CTR_SOURCES)

INCLUDE_DIRECTORIES(libs/cppcodec)
AUX_SOURCE_DIRECTORY(./src/cppcodec CTR_SOURCES)

INCLUDE_DIRECTORIES(libs/base64rvv)
AUX_SOURCE_DIRECTORY(./src/base64rvv CTR_SOURCES)


INCLUDE_DIRECTORIES(libs/boost/utility/include)
INCLUDE_DIRECTORIES(libs/boost/serialization/include)
INCLUDE_DIRECTORIES(libs/boost/config/include)
INCLUDE_DIRECTORIES(libs/boost/detail/include)
INCLUDE_DIRECTORIES(libs/boost/preprocessor/include)
INCLUDE_DIRECTORIES(libs/boost/core/include)
INCLUDE_DIRECTORIES(libs/boost/type_traits/include)
INCLUDE_DIRECTORIES(libs/boost/iterator/include)
INCLUDE_DIRECTORIES(libs/boost/mpl/include)
INCLUDE_DIRECTORIES(libs/boost/static_assert/include)
INCLUDE_DIRECTORIES(libs/boost/assert/include)
AUX_SOURCE_DIRECTORY(./src/boost CTR_SOURCES)

SET_SOURCE_FILES_PROPERTIES( ${CTR_SOURCES} PROPERTIES LANGUAGE CXX )
SET_SOURCE_FILES_PROPERTIES( ${C_SOURCES} PROPERTIES LANGUAGE C )

ADD_EXECUTABLE(${NAME} ${CTR_SOURCES} ${C_SOURCES})
IF(UNIX AND (NOT APPLE))
  TARGET_LINK_LIBRARIES(${NAME} gtest pthread stdc++fs)
else()
  TARGET_LINK_LIBRARIES(${NAME} gtest pthread)
endif()
